# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
   - stage
   - prod
   - dev
   - test
   - newui-dev
   - newui-stage
   - newui-test
   - newui-prod

resources:
   - repo: self

variables:
   # Container registry service connection established during pipeline creation
   ${{ if eq(variables['Build.SourceBranchName'], 'stage') }}:
      imageRepository: 'alien-backoffice-web'
      tag: 'stage'
   ${{ elseif eq(variables['Build.SourceBranchName'], 'prod') }}:
      imageRepository: 'alien-backoffice-web'
      tag: 'prod'
   ${{ elseif eq(variables['Build.SourceBranchName'], 'dev') }}:
      imageRepository: 'alien-backoffice-web'
      tag: 'dev'
   ${{ elseif eq(variables['Build.SourceBranchName'], 'test') }}:
      imageRepository: 'alien-backoffice-web'
      tag: 'test'
   ${{ elseif eq(variables['Build.SourceBranchName'], 'newui-stage') }}:
      imageRepository: 'alien-bo2'
      tag: 'stage'
   ${{ elseif eq(variables['Build.SourceBranchName'], 'newui-prod') }}:
      imageRepository: 'alien-bo2'
      tag: 'prod'
   ${{ elseif eq(variables['Build.SourceBranchName'], 'newui-dev') }}:
      imageRepository: 'alien-bo2'
      tag: 'dev'
   ${{ elseif eq(variables['Build.SourceBranchName'], 'newui-test') }}:
      imageRepository: 'alien-bo2'
      tag: 'test'
   ${{ else }}:
      imageRepository: 'invalid'
      tag: 'error'
   dockerRegistryServiceConnection: '5db797e1-0f87-4a14-8d1c-17a572fd65a3'
   containerRegistry: 'cralienstage.azurecr.io'
   dockerfilePath: '**/Dockerfile'

   # Agent VM image name
   vmImageName: 'ubuntu-latest'

stages:
   - stage: Build
     displayName: Build and push stage
     jobs:
        - job: Build
          displayName: Build
          pool:
             vmImage: $(vmImageName)
          steps:
             - task: Docker@2
               displayName: Build and push an image to container registry
               inputs:
                  command: buildAndPush
                  repository: $(imageRepository)
                  dockerfile: $(dockerfilePath)
                  containerRegistry: $(dockerRegistryServiceConnection)
                  tags: |
                     $(tag)
                  dockerFileArgs: |
                     NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
